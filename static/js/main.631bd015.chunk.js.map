{"version":3,"sources":["App.js","reportWebVitals.js","serviceWorkerRegistration.js","index.js"],"names":["Navigation","React","lazy","Logo","ImageLinkForm","Rank","FaceDetect","SignIn","Register","initialState","input","imageUrl","box","route","isSignedIn","user","id","name","email","entries","joined","App","calculateFaceLocation","data","clarifaiFace","outputs","regions","region_info","bounding_box","image","document","getElementById","width","Number","height","leftCol","left_col","topRow","top_row","rightCol","right_col","bottomRow","bottom_row","displayFaceBox","setState","loadUser","onSubmit","state","requestOptions","method","headers","body","JSON","stringify","fetch","then","response","json","count","Object","assign","catch","console","log","err","onInputChange","event","target","value","onRouteChange","this","className","params","fallback","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","error","ReactDOM","render","StrictMode","URL","process","href","origin","addEventListener","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.631bd015.chunk.js","sourcesContent":["import React,{Component,Suspense}from\"react\";import\"./App.css\";import Particles from\"react-particles-js\";\r\n\r\nconst Navigation=React.lazy(()=>import(\"./components/Navigation/Navigation\")),Logo=React.lazy(()=>import(\"./components/Logo/Logo\")),ImageLinkForm=React.lazy(()=>import(\"./components/ImageLinkForm/ImageLinkForm\")),Rank=React.lazy(()=>import(\"./components/Rank/Rank\")),FaceDetect=React.lazy(()=>import(\"./components/FaceDetect/FaceDetect\")),SignIn=React.lazy(()=>import(\"./components/SignIn/SignIn\")),Register=React.lazy(()=>import(\"./components/Register/Register\"));\r\n\r\nconst initialState={input:\"\",imageUrl:\"\",box:{},route:\"signin\",isSignedIn:!1,user:{id:\"\",name:\"\",email:\"\",entries:0,joined:\"\"}};\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = initialState\r\n  }\r\n  calculateFaceLocation = data => {\r\n    const clarifaiFace=data.outputs[0].data.regions[0].region_info.bounding_box,image=document.getElementById(\"inputimage\"),width=Number(image.width),height=Number(image.height);\r\n    return {\r\n      leftCol: clarifaiFace.left_col * width,\r\n      topRow: clarifaiFace.top_row * height,\r\n      rightCol: width - (clarifaiFace.right_col * width),\r\n      bottomRow: height - (clarifaiFace.bottom_row * height)\r\n    };\r\n  };\r\n  displayFaceBox = box => {\r\n    this.setState({ box: box });\r\n  };\r\n  loadUser= data => {\r\n    this.setState({user: {\r\n      id:data.id,\r\n      name:data.name,\r\n      email:data.email,\r\n      entries:data.entries,\r\n      joined: data.joined\r\n    }})\r\n  }\r\n  onSubmit = () => {\r\n    this.setState({ imageUrl: this.state.input });\r\n    const requestOptions = {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({ input:this.state.input })\r\n    };\r\n    fetch('https://face-recognition-app-backend.herokuapp.com/imageurl',requestOptions)\r\n    .then(response => response.json())\r\n    .then(response=>{\r\n      if(response){\r\n        const requestOptions = {\r\n          method: 'PUT',\r\n          headers: { 'Content-Type': 'application/json' },\r\n          body: JSON.stringify({ id:this.state.user.id })\r\n        };\r\n        fetch('https://face-recognition-app-backend.herokuapp.com/image',requestOptions)\r\n        .then(response => response.json())\r\n        .then(count=>{\r\n            if(count){\r\n              this.setState(Object.assign(this.state.user,{entries:count}))\r\n            }\r\n        })\r\n        .catch(console.log)\r\n      }\r\n      this.displayFaceBox(this.calculateFaceLocation(response))\r\n    })\r\n    .catch(err=>console.log(err))\r\n  };\r\n  onInputChange = event => this.setState({ input: event.target.value });\r\n  onRouteChange = route => {\r\n    if(route === 'signout'){\r\n      this.setState({isSignedIn: false})\r\n      this.setState({initialState})\r\n    } else if(route === 'home'){\r\n      this.setState({isSignedIn: true})\r\n    }\r\n    this.setState({route: route})\r\n  }\r\n  render() {\r\n    const {isSignedIn,route,box,imageUrl} = this.state\r\n    return (\r\n      <div className=\"App\"> <Particles className=\"particles\" params={{\"particles\":{\"number\":{\"value\": 150}, \"size\":{\"value\": 3}}, \"interactivity\":{\"events\":{\"onhover\":{\"enable\": true, \"mode\": \"repulse\"}}}}}/> <Suspense fallback={<div>Chargement...</div>}> <Navigation isSignedIn={isSignedIn}onRouteChange={this.onRouteChange}/>{route==='home' ? <div> <Logo/> <Rank name={this.state.user.name}entries={this.state.user.entries}/> <ImageLinkForm onInputChange={this.onInputChange}onSubmit={this.onSubmit}/> <FaceDetect box={box}imageUrl={imageUrl}/> </div>: route==='signin' ? <SignIn loadUser={this.loadUser}onRouteChange={this.onRouteChange}/> : <Register loadUser={this.loadUser}onRouteChange={this.onRouteChange}/>}</Suspense></div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.0/8 are considered localhost for IPv4.\r\n      window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n  );\r\n  \r\n  export function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      // The URL constructor is available in all browsers that support SW.\r\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        // Our service worker won't work if PUBLIC_URL is on a different origin\r\n        // from what our page is served on. This might happen if a CDN is used to\r\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n        return;\r\n      }\r\n  \r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n  \r\n        if (isLocalhost) {\r\n          // This is running on localhost. Let's check if a service worker still exists or not.\r\n          checkValidServiceWorker(swUrl, config);\r\n  \r\n          // Add some additional logging to localhost, pointing developers to the\r\n          // service worker/PWA documentation.\r\n          navigator.serviceWorker.ready.then(() => {\r\n            console.log(\r\n              'This web app is being served cache-first by a service ' +\r\n                'worker. To learn more, visit https://cra.link/PWA'\r\n            );\r\n          });\r\n        } else {\r\n          // Is not localhost. Just register service worker\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  function registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then((registration) => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          if (installingWorker == null) {\r\n            return;\r\n          }\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the updated precached content has been fetched,\r\n                // but the previous service worker will still serve the older\r\n                // content until all client tabs are closed.\r\n                console.log(\r\n                  'New content is available and will be used when all ' +\r\n                    'tabs for this page are closed. See https://cra.link/PWA.'\r\n                );\r\n  \r\n                // Execute callback\r\n                if (config && config.onUpdate) {\r\n                  config.onUpdate(registration);\r\n                }\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // \"Content is cached for offline use.\" message.\r\n                console.log('Content is cached for offline use.');\r\n  \r\n                // Execute callback\r\n                if (config && config.onSuccess) {\r\n                  config.onSuccess(registration);\r\n                }\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error during service worker registration:', error);\r\n      });\r\n  }\r\n  \r\n  function checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n      headers: { 'Service-Worker': 'script' },\r\n    })\r\n      .then((response) => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        const contentType = response.headers.get('content-type');\r\n        if (\r\n          response.status === 404 ||\r\n          (contentType != null && contentType.indexOf('javascript') === -1)\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then((registration) => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log('No internet connection found. App is running in offline mode.');\r\n      });\r\n  }\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready\r\n        .then((registration) => {\r\n          registration.unregister();\r\n        })\r\n        .catch((error) => {\r\n          console.error(error.message);\r\n        });\r\n    }\r\n  }","import React from\"react\";import ReactDOM from\"react-dom\";import\"./index.css\";import App from\"./App\";import reportWebVitals from\"./reportWebVitals\";import\"tachyons\";import * as serviceWorkerRegistration from './serviceWorkerRegistration';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode> <App/> </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://cra.link/PWA\r\nserviceWorkerRegistration.register();\r\n\r\nreportWebVitals();"],"sourceRoot":""}